[{"C:\\Users\\рома\\Documents\\react2\\src\\index.js":"1","C:\\Users\\рома\\Documents\\react2\\src\\reportWebVitals.js":"2","C:\\Users\\рома\\Documents\\react2\\src\\App.js":"3","C:\\Users\\рома\\Documents\\react2\\src\\Redux\\sidebarReduser .js":"4","C:\\Users\\рома\\Documents\\react2\\src\\components\\Header\\HeaderContainer.jsx":"5","C:\\Users\\рома\\Documents\\react2\\src\\components\\Nav\\NavContainer.jsx":"6","C:\\Users\\рома\\Documents\\react2\\src\\components\\common\\Preloader\\Preloader.jsx":"7","C:\\Users\\рома\\Documents\\react2\\src\\components\\Profile\\ProfileContainer.jsx":"8","C:\\Users\\рома\\Documents\\react2\\src\\components\\Dialogs\\DialogsContainer.jsx":"9","C:\\Users\\рома\\Documents\\react2\\src\\hoc\\withAuthRedirect.js":"10","C:\\Users\\рома\\Documents\\react2\\src\\components\\Header\\Header.jsx":"11","C:\\Users\\рома\\Documents\\react2\\src\\components\\Nav\\Nav.jsx":"12","C:\\Users\\рома\\Documents\\react2\\src\\components\\Profile\\Profile.jsx":"13","C:\\Users\\рома\\Documents\\react2\\src\\components\\Dialogs\\Dialogs.jsx":"14","C:\\Users\\рома\\Documents\\react2\\src\\components\\Nav\\Navitem.jsx":"15","C:\\Users\\рома\\Documents\\react2\\src\\components\\Dialogs\\Dialogitem\\Dialogitem.jsx":"16","C:\\Users\\рома\\Documents\\react2\\src\\components\\Profile\\Profileinfo\\Profileinfo.jsx":"17","C:\\Users\\рома\\Documents\\react2\\src\\components\\Dialogs\\Messages\\Messages.jsx":"18","C:\\Users\\рома\\Documents\\react2\\src\\components\\Profile\\MyPosts\\MyPostsContainer.jsx":"19","C:\\Users\\рома\\Documents\\react2\\src\\components\\Profile\\MyPosts\\MyPosts.jsx":"20","C:\\Users\\рома\\Documents\\react2\\src\\components\\Profile\\Profileinfo\\ProfileStatusWithHooks.jsx":"21","C:\\Users\\рома\\Documents\\react2\\src\\components\\Profile\\Profileinfo\\ProfileDataForm.jsx":"22","C:\\Users\\рома\\Documents\\react2\\src\\components\\Profile\\MyPosts\\Post\\Post.jsx":"23","C:\\Users\\рома\\Documents\\react2\\src\\Redux\\app-Reduser.ts":"24","C:\\Users\\рома\\Documents\\react2\\src\\Redux\\authReduser.ts":"25","C:\\Users\\рома\\Documents\\react2\\src\\Redux\\dialogReduser.ts":"26","C:\\Users\\рома\\Documents\\react2\\src\\Redux\\profileReduser.ts":"27","C:\\Users\\рома\\Documents\\react2\\src\\Redux\\usersReduser.ts":"28","C:\\Users\\рома\\Documents\\react2\\src\\Redux\\new-store.ts":"29","C:\\Users\\рома\\Documents\\react2\\src\\components\\Users\\UsersContainer.tsx":"30","C:\\Users\\рома\\Documents\\react2\\src\\Redux\\users-selectors.ts":"31","C:\\Users\\рома\\Documents\\react2\\src\\components\\Users\\UsersApiContainer.tsx":"32","C:\\Users\\рома\\Documents\\react2\\src\\components\\Users\\Users.tsx":"33","C:\\Users\\рома\\Documents\\react2\\src\\components\\Users\\User.tsx":"34","C:\\Users\\рома\\Documents\\react2\\src\\components\\common\\paginator\\Pagination.tsx":"35","C:\\Users\\рома\\Documents\\react2\\src\\components\\Profile\\Profileinfo\\ProfileStatus.tsx":"36","C:\\Users\\рома\\Documents\\react2\\src\\api\\api.ts":"37","C:\\Users\\рома\\Documents\\react2\\src\\components\\Login\\Login.tsx":"38","C:\\Users\\рома\\Documents\\react2\\src\\utils\\validator\\validators.ts":"39","C:\\Users\\рома\\Documents\\react2\\src\\components\\common\\FormControls\\FormControls.tsx":"40"},{"size":1229,"mtime":1649013393561,"results":"41","hashOfConfig":"42"},{"size":375,"mtime":1639674209140,"results":"43","hashOfConfig":"42"},{"size":3374,"mtime":1650742958635,"results":"44","hashOfConfig":"42"},{"size":566,"mtime":1639674209118,"results":"45","hashOfConfig":"42"},{"size":584,"mtime":1642880667492,"results":"46","hashOfConfig":"42"},{"size":591,"mtime":1639674209124,"results":"47","hashOfConfig":"42"},{"size":232,"mtime":1639674209140,"results":"48","hashOfConfig":"42"},{"size":2676,"mtime":1648922672772,"results":"49","hashOfConfig":"42"},{"size":723,"mtime":1640285483748,"results":"50","hashOfConfig":"42"},{"size":871,"mtime":1640716997189,"results":"51","hashOfConfig":"42"},{"size":476,"mtime":1642621133558,"results":"52","hashOfConfig":"42"},{"size":1592,"mtime":1639937527120,"results":"53","hashOfConfig":"42"},{"size":582,"mtime":1648148343051,"results":"54","hashOfConfig":"42"},{"size":1824,"mtime":1642619614813,"results":"55","hashOfConfig":"42"},{"size":439,"mtime":1639674209124,"results":"56","hashOfConfig":"42"},{"size":383,"mtime":1639674209124,"results":"57","hashOfConfig":"42"},{"size":3542,"mtime":1648410022216,"results":"58","hashOfConfig":"42"},{"size":180,"mtime":1639674209124,"results":"59","hashOfConfig":"42"},{"size":1728,"mtime":1640372911575,"results":"60","hashOfConfig":"42"},{"size":2131,"mtime":1648323797142,"results":"61","hashOfConfig":"42"},{"size":1920,"mtime":1647712093117,"results":"62","hashOfConfig":"42"},{"size":1477,"mtime":1648322914448,"results":"63","hashOfConfig":"42"},{"size":428,"mtime":1639674209140,"results":"64","hashOfConfig":"42"},{"size":1995,"mtime":1650998848029,"results":"65","hashOfConfig":"42"},{"size":3824,"mtime":1651167809634,"results":"66","hashOfConfig":"42"},{"size":1993,"mtime":1650130557937,"results":"67","hashOfConfig":"42"},{"size":5339,"mtime":1650998763082,"results":"68","hashOfConfig":"42"},{"size":5564,"mtime":1652385141792,"results":"69","hashOfConfig":"42"},{"size":1337,"mtime":1652467775182,"results":"70","hashOfConfig":"42"},{"size":1904,"mtime":1652467494298,"results":"71","hashOfConfig":"42"},{"size":1053,"mtime":1650309894683,"results":"72","hashOfConfig":"42"},{"size":2577,"mtime":1650743161296,"results":"73","hashOfConfig":"42"},{"size":1024,"mtime":1650740930493,"results":"74","hashOfConfig":"42"},{"size":2032,"mtime":1650742497707,"results":"75","hashOfConfig":"42"},{"size":2766,"mtime":1650481396278,"results":"76","hashOfConfig":"42"},{"size":2211,"mtime":1650480618768,"results":"77","hashOfConfig":"42"},{"size":3093,"mtime":1651167465341,"results":"78","hashOfConfig":"42"},{"size":3733,"mtime":1651690043971,"results":"79","hashOfConfig":"42"},{"size":443,"mtime":1651519130357,"results":"80","hashOfConfig":"42"},{"size":1790,"mtime":1651689656134,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"18784x4",{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"84"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"84"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"84"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"84"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"84"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"84"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"84"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"84"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"84"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"84"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"84"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"142"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"142"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"142"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"142"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"142"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"142"},"C:\\Users\\рома\\Documents\\react2\\src\\index.js",[],["181","182"],"C:\\Users\\рома\\Documents\\react2\\src\\reportWebVitals.js",[],"C:\\Users\\рома\\Documents\\react2\\src\\App.js",["183"],"import React, { Suspense } from 'react';\r\nimport \"./App.css\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport { Route, Switch, withRouter, Redirect } from \"react-router-dom\";\r\nimport NavContainer from \"./components/Nav/NavContainer\";\r\n// import DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\n// import ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport QplOogin from \"./components/Login/Login\";\r\nimport { initializeApp } from \"./Redux/app-Reduser\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport Preloader from \"./components/common/Preloader/Preloader\";\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\n// ленивая загрузка почему-то работает внизу импортов\r\nclass App extends React.Component {\r\n  catchAllUnhandledError = (promiseRejectionEvent) => {\r\n    alert(\"Some error\");\r\n    // console.error(promiseRejectionEvent);\r\n    //reason, promiseRejectionEvent-почитать\r\n  }\r\n  componentDidMount() {\r\n    this.props.initializeApp();\r\n    window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledError );\r\n  //  глобальная  обработка ошибок\r\n  } \r\n  //END componentDidMount\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledError );\r\n  }\r\n  render() {\r\n    if (!this.props.initialized) {\r\n      return <Preloader />\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <HeaderContainer />\r\n        <NavContainer\r\n        /* store={props.store}\r\n            friends={props.stateaa.dialogPages.dialogs2}\r\n      так как взял отсюда , то при изменении Dialogs.jsx\r\n      меняется и в Nav.jsx \r\n        sideavata={props.stateaa.sidebar}*/\r\n        />\r\n\r\n        <div className=\"app-content\">\r\n          {/* <Route /> */}\r\n          <Suspense fallback={<div>Загрузка...</div>}>\r\n            <section>\r\n              <Route path=\"/dialogs/\" render={() => <DialogsContainer />} />\r\n              <Route path=\"/profile/:userId?\" render={() => <ProfileContainer />} />\r\n              {/* знак вопроса обозначает ,что может и не быть userId . это для withRouter */}\r\n            </section>\r\n          </Suspense>\r\n          <Route path=\"/users\" render={() => <UsersContainer pageTitle={'Samuray'}/>} />\r\n          {/* Samuray собственные пропсы */}\r\n          <Route path=\"/login/\" render={() => <QplOogin />} />\r\n          <Route exact path=\"/\" render={() => <Redirect from=\"/\" to=\"/profile\" />} />\r\n          {/* <Route path=\"*\" render={() => <div>404 NOT FOUND</div>} /> */}\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  initialized: state.app.initialized\r\n});\r\nexport default compose(withRouter,\r\n  connect(mapStateToProps, { initializeApp }))(App);\r\n/*   когда connect(им) компоненту сбивается роут поэтому добавлен withRouter\r\n  ,но вроде уже пофиксили эту ошибку и можно не добавлять */\r\n","C:\\Users\\рома\\Documents\\react2\\src\\Redux\\sidebarReduser .js",["184","185","186"],"let initialState = [\r\n  {\r\n    img2: (\r\n      <img src=\"https://i0.wp.com/andrey-eltsov.ru/wp-content/uploads/2018/02/SmailikSbor3.jpg\" />\r\n    ),\r\n  },\r\n  {\r\n    img2: (\r\n      <img src=\"https://i0.wp.com/andrey-eltsov.ru/wp-content/uploads/2018/02/SmailikSbor3.jpg\" />\r\n    ),\r\n  },\r\n  {\r\n    img2: (\r\n      <img src=\"https://i0.wp.com/andrey-eltsov.ru/wp-content/uploads/2018/02/SmailikSbor3.jpg\" />\r\n    ),\r\n  },\r\n];\r\nconst sidebarReduser = (state = initialState, action) => {\r\n  //let stateCopy={...state};\r\n  return state;\r\n};\r\nexport default sidebarReduser;\r\n","C:\\Users\\рома\\Documents\\react2\\src\\components\\Header\\HeaderContainer.jsx",["187"],"import * as axios from \"axios\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { logout } from \"../../Redux/authReduser\";\r\nimport Header from \"./Header\";\r\nclass HeaderContainer extends React.Component {\r\n  /* componentDidMount() {\r\n    this.props.getAuthDataUser();\r\n  } //END componentDidMount */\r\n  render() {\r\n    return <Header {...this.props} />;\r\n  }\r\n} //END HeaderContainer\r\nconst mapStateToProps = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n  login: state.auth.login\r\n});\r\nexport default connect(mapStateToProps, { logout })(HeaderContainer);\r\n","C:\\Users\\рома\\Documents\\react2\\src\\components\\Nav\\NavContainer.jsx",[],"C:\\Users\\рома\\Documents\\react2\\src\\components\\common\\Preloader\\Preloader.jsx",["188"],"import React from \"react\";\r\nimport preloader from \"../../../assets/images/Spinner-1s-200px.svg\";\r\nlet Preloader = (props) => {\r\n  return (\r\n    <div>\r\n      <img src={preloader} />\r\n    </div> \r\n  );\r\n};\r\nexport default Preloader;\r\n","C:\\Users\\рома\\Documents\\react2\\src\\components\\Profile\\ProfileContainer.jsx",["189"],"import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport { profilesData, getStatus, updateUserStatus,savePhoto,saveProfile } from \"../../Redux/profileReduser\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n  // чтобы код не писать дважды ниже создам refreshProfile\r\n  refreshProfile(){\r\n    let userIdd = this.props.match.params.userId\r\n    /*когда вызывается withRouter из url метод match возвращает params-userId\r\n    и получаю id юзера*/\r\n    if (!userIdd) {\r\n      userIdd = this.props.authorizedUserId;\r\n    }\r\n   /*  if (!userIdd) {\r\n      this.props.history.push(\"/login\");\r\n      когда жму кнопку вылогиниться нужно уйти из профиля,\r\n      но вроде и так срабатывает withAuthRedirect,\r\n       а это \"програмный\" редирект\r\n    } */\r\n    this.props.profilesData(userIdd);\r\n    this.props.getStatus(userIdd);\r\n    //вызываю thunk из редюсера\r\n  }\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  } //end componentDidMount\r\n  componentDidUpdate(prevProps,prevState,snapshot){\r\n    if (this.props.match.params.userId !=prevProps.match.params.userId){\r\n      this.refreshProfile();\r\n    }\r\n    // match из withRouter\r\n    // чтобы с чужого профиля переходить на свой при нажатии на profile\r\n  }\r\n  render() {\r\n    return <Profile {...this.props}\r\n              isOwner={!this.props.match.params.userId}\r\n              // если нет userId\r\n              status={this.props.status}\r\n              updateUserStatus={this.props.updateUserStatus}\r\n              profile={this.props.profile}/*profile={this.props.profile} -был заккоментирован*/ \r\n              savePhoto={this.props.savePhoto}/>\r\n  }\r\n} //end ProfileContainer\r\nlet mapStateToProps = (state) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserId: state.auth.id,\r\n  isAuth: state.auth.isAuth,\r\n});\r\nexport default compose(\r\n  connect(mapStateToProps, { profilesData, getStatus, updateUserStatus,savePhoto,saveProfile}),\r\n  withAuthRedirect,\r\n  //withRouter получаю из url нужную часть\r\n  withRouter\r\n)(ProfileContainer);\r\n//возьми ProfileContainer и закинь его в withRouter--> withAuthRedirect,а \r\n// потом результат в connect(mapStateToProps...\r\n","C:\\Users\\рома\\Documents\\react2\\src\\components\\Dialogs\\DialogsContainer.jsx",[],"C:\\Users\\рома\\Documents\\react2\\src\\hoc\\withAuthRedirect.js",[],"C:\\Users\\рома\\Documents\\react2\\src\\components\\Header\\Header.jsx",[],"C:\\Users\\рома\\Documents\\react2\\src\\components\\Nav\\Nav.jsx",["190","191"],"import { NavLink } from \"react-router-dom\";\r\nimport classes from \"./Nav.module.css\";\r\nimport Navitem from \"./Navitem\";\r\nconst Nav = (props) => {\r\n  let navElements = props.friends.map((d) => (\r\n    <Navitem name={d.nname} id={d.id} avatar={d.avatar} />\r\n  ));\r\n    let nifElements = props.sideavata.map((m) => (\r\n      <Navitem foto={m.img2} />\r\n    ));\r\n  return (\r\n    <nav className={classes.nav}>\r\n      <div className={classes.item}>\r\n        <NavLink to=\"/profile\" activeClassName={classes.activeLink}>\r\n          Profile\r\n        </NavLink>\r\n      </div>\r\n      <div className={classes.item}>\r\n        <NavLink to=\"/dialogs\" activeClassName={classes.active}>\r\n          Dialogs\r\n        </NavLink>\r\n        {/* activeClassName стиль активной ссылки */}\r\n      </div>\r\n      <div className={classes.item}>\r\n        <NavLink to=\"/users\" activeClassName={classes.active}>\r\n          Users\r\n        </NavLink>\r\n      </div>\r\n      <div className={classes.item}>\r\n        <a>News</a>\r\n      </div>\r\n      <div className={classes.item}>\r\n        <NavLink to=\"/musik\">Music</NavLink>\r\n      </div>\r\n      <div className={classes.item}>\r\n        <NavLink to=\"/login\">Login</NavLink>\r\n      </div>\r\n      <div className={`${classes.item} ${classes.aert}`}>\r\n        {/* 2 стиля для одного элемента перестало работать*/}\r\n        <a>Settings</a>\r\n      </div>\r\n      <div> FRIENDS:</div>\r\n      <div className={classes.navitem}>\r\n        {navElements}\r\n         {nifElements} \r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","C:\\Users\\рома\\Documents\\react2\\src\\components\\Profile\\Profile.jsx",[],"C:\\Users\\рома\\Documents\\react2\\src\\components\\Dialogs\\Dialogs.jsx",[],"C:\\Users\\рома\\Documents\\react2\\src\\components\\Nav\\Navitem.jsx",["192"],"import { NavLink } from \"react-router-dom\";\r\nimport classes from \"./Nav.module.css\";\r\nconst Navitem = (props) => {\r\n \r\n  return (\r\n    <div className={classes.friends}>\r\n     <div className={classes.nu}>{props.name}{props.foto}</div>\r\n      {/* <div className={classes.mnu}>{props.name}{props.foto}</div>\r\n     <div className={classes.pnu}>{props.name}{props.foto}</div>\r\n      */}\r\n     \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navitem;\r\n","C:\\Users\\рома\\Documents\\react2\\src\\components\\Dialogs\\Dialogitem\\Dialogitem.jsx",[],"C:\\Users\\рома\\Documents\\react2\\src\\components\\Profile\\Profileinfo\\Profileinfo.jsx",["193","194","195","196"],"\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport classes from \"./Profileinfo.module.css\"\r\nimport ProfileStatus from \"./ProfileStatus\"\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"./../../../assets/images/users.png\";\r\nimport { useState } from \"react\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nconst Profileinfo = (props) => {\r\n  let [editMode,setEditMode]= useState(false)\r\n//    деструктуризация массива\r\n//    useState сидит в библиотеке react\r\n//useState возвращает первым номером значение и 2м ф. \r\n// которая меняет это значение(1-editMode,2-setEditMode)\r\n  if (!props.profile) {\r\n    return <Preloader />\r\n  }\r\n  const onMainPhotoSelected = (e) => {\r\n    if (e.target.files.length) {\r\n      // если фото имеет длинну-не пустая\r\n      props.savePhoto(e.target.files[0])\r\n      // то возьми это фото\r\n      console.log(props.savePhoto)\r\n    }\r\n  }\r\n  const onSubmit = (formData) => {\r\n        props.saveProfile(formData).then(()=>{\r\n         setEditMode(false);\r\n        });\r\n        // async await не сработал\r\n    }\r\n  return (\r\n    <div>\r\n      <img src=\"https://i.pinimg.com/originals/f5/39/b6/f539b6967cb0f250d4e05cc133a8c87d.jpg\" width=\"800\" height=\"400\" />\r\n      {/* пляж */}\r\n      <div className={classes.descr}>\r\n        <img src={props.profile.photos.large || userPhoto} className={classes.avatar} />\r\n        {props.isOwner && <input type=\"file\" onChange={onMainPhotoSelected} />}\r\n        {/* если есть isOwner покажи кнопку с выбором файла */}\r\n       {editMode?\r\n       <ProfileDataForm initialValues={props.profile} profile={props.profile} onSubmit={onSubmit}/>:\r\n      //  initialValues метод redux-form. При перезагрузке страницы ,\r\n      //  чтобы сохранялись в input и textarea введенные значения\r\n       <ProfileData goToEditMode={()=>{setEditMode(true)}} isOwner={props.isOwner} profile={props.profile} />}\r\n        {/* тринарное выражение на верху */}\r\n        <ProfileStatusWithHooks status={props.status}\r\n          updateUserStatus={props.updateUserStatus} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nconst ProfileData = ({ profile,isOwner,goToEditMode }) => {\r\n  return <div>\r\n    {isOwner&&<div><button onClick={goToEditMode}>edit</button></div>}\r\n    <div>avat+descr</div>\r\n    <div>Имя:{profile.fullName}</div>\r\n    <div>обо мне: {profile.aboutMe}</div>\r\n    <div>ищешь работу?{profile.lookingForAJob == true ? 'Да' : 'Нет'}</div>\r\n    <div>\r\n      какую хочешь работу? {profile.lookingForAJobDescription}\r\n    </div>\r\n    <div>\r\n      контакты:{Object.keys(profile.contacts).map(key => {\r\n        // Object.keys(obj) – возвращает массив ключей.\r\n        return <Contacts key={key} contactTitle={key} contactValue={profile.contacts[key]} />\r\n        // contactValue  пример: let abv={\r\n        //  github: qwerty\r\n        //     vk: trytry\r\n        //     facebook: popop}\r\n        //     abv[facebook] вернет popop\r\n        // key={key} зачем не понял\r\n      })}\r\n    </div>\r\n  </div>\r\n}\r\nconst Contacts = ({ contactTitle, contactValue }) => {\r\n  return <div className={classes.contact}>\r\n    {contactTitle}:{contactValue}\r\n  </div>\r\n}\r\n\r\nexport default Profileinfo;\r\n","C:\\Users\\рома\\Documents\\react2\\src\\components\\Dialogs\\Messages\\Messages.jsx",[],"C:\\Users\\рома\\Documents\\react2\\src\\components\\Profile\\MyPosts\\MyPostsContainer.jsx",[],"C:\\Users\\рома\\Documents\\react2\\src\\components\\Profile\\MyPosts\\MyPosts.jsx",["197"],"import classes from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { maxLengthCreator, required } from \"../../../utils/validator/validators\";\r\nimport { input } from \"../../common/FormControls/FormControls\";\r\n// console.log(MyPosts);\r\nconst maxLength10=maxLengthCreator(10);\r\nconst MyPosts =React.memo(props => {\r\n  // React.memo если пропсы не поменялись.то не рендерь\r\n  let postElement = props.post.map((p) => (\r\n    <Post key={p.id} message={p.message} count={p.count} />\r\n  ));\r\n  let newPostElement = React.createRef(); /* 31 реакт создай ссылку*/\r\n  let addhhPost = (values) => {\r\n    // let newtext = newPostElement.current.value; -перенес в state\r\n    props.addPost(values.newPostText);\r\n    //props.dispatch(addhhPostActionCreator());\r\n    /*31,32 вызываю функцию addPost\r\n      в state.js */\r\n    /* props.updatenewPost('');обнуляю значение в textarea \r\n    -перенес в state.js */\r\n  };\r\n  // let onPostChange = () => {\r\n  //   let newtext5 = newPostElement.current.value;\r\n  //   props.updateNewPostText(newtext5);\r\n  //   //let action=(onPostChangeActionCreator(newtext5))\r\n  //   //создал action для примера чтобы видеть процесс\r\n  //   //props.dispatch(action);\r\n  //   //при изменении в textarea передаю данные в state.js\r\n  // };\r\n  return (\r\n    <div className={classes.post}>\r\n      <h2>My Post</h2>\r\n      <div>\r\n        <PostReduxForm onSubmit={addhhPost}/>\r\n      </div>\r\n      <div className={classes.newpost}>{postElement}</div>\r\n    </div>\r\n  );\r\n});\r\nconst myPostForm= (props) => {\r\n  return(\r\n  <form onSubmit={props.handleSubmit}>\r\n    <div>\r\n      <Field component={input} name=\"newPostText\" placeholder=\"введите\" \r\n      validate={[required,maxLength10]} />\r\n    </div>\r\n    <div>\r\n      <button >Add post</button>\r\n    </div>\r\n  </form>\r\n  )\r\n};\r\nconst PostReduxForm = reduxForm({ form: \"myPostText\" })(myPostForm);\r\nexport default MyPosts;\r\n","C:\\Users\\рома\\Documents\\react2\\src\\components\\Profile\\Profileinfo\\ProfileStatusWithHooks.jsx",["198","199"],"import classes from \"./Profileinfo.module.css\"\r\nimport React, { useState, useEffect } from \"react\";\r\n// import { useEffect } from \"react\";\r\n\r\nconst ProfileStatusWithHooks= (props) =>{\r\n   let [editMode,setEditMode]= useState(false)\r\n//    деструктуризация массива\r\n//    useState сидит в библиотеке react\r\n//useState возвращает первым номером значение и 2м ф. \r\n// которая меняет это значение(1-editMode,2-setEditMode)\r\nlet [status,setStatus]= useState(props.status)\r\n// раздробил локальный стейт на 2 части\r\nuseEffect( ()=>{\r\n    setStatus=(props.status);\r\n},[props.status])\r\n// зависишь от [props.status] если он поменялся то отрисуй\r\n// useEffect срабатывает после отрисовки компоненты\r\nconst activateEditMode = () => {\r\n  setEditMode(true)\r\n}\r\nconst deactivateEditMode = () => {\r\n    setEditMode(false)\r\n    props.updateUserStatus(status);\r\n}\r\nconst onStatusChange = (e) => {\r\n    setStatus(e.currentTarget.value);\r\n    // закидываю вводимые символы в props.status\r\n}\r\n            return (\r\n            <div>{!editMode&&//если editMode в стейте=false ,то...\r\n                <div>\r\n                   <b>status:</b> <span onDoubleClick={activateEditMode}>{props.status ||\"no status\"}</span>\r\n                </div>\r\n            }\r\n                {editMode &&\r\n                    <div>\r\n                        <input onChange={onStatusChange} \r\n                        // при изменениии в input\r\n                        value={status}\r\n                         autoFocus={true}\r\n                          onBlur={deactivateEditMode} />\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    \r\n};\r\nexport default ProfileStatusWithHooks;\r\n","C:\\Users\\рома\\Documents\\react2\\src\\components\\Profile\\Profileinfo\\ProfileDataForm.jsx",[],"C:\\Users\\рома\\Documents\\react2\\src\\components\\Profile\\MyPosts\\Post\\Post.jsx",["200"],"import classes from \"./Post.module.css\";\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={classes.item}>\r\n      <img src=\"http://pngimg.com/uploads/spongebob/spongebob_PNG8.png\" />\r\n      {/* <img src=\"https://kurer-sreda.ru/wp-contenpt/uloads/2020/06/1-48-800x663.png\" /> */}\r\n\r\n      {props.message}\r\n      <div>\r\n        <span>Like {props.count}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","C:\\Users\\рома\\Documents\\react2\\src\\Redux\\app-Reduser.ts",[],["201","202"],"C:\\Users\\рома\\Documents\\react2\\src\\Redux\\authReduser.ts",[],"C:\\Users\\рома\\Documents\\react2\\src\\Redux\\dialogReduser.ts",[],"C:\\Users\\рома\\Documents\\react2\\src\\Redux\\profileReduser.ts",["203"],"import { ThunkAction } from 'redux-thunk';\r\nimport { AppStateType } from './new-store';\r\nimport { profileApi } from \"../api/api\";\r\nimport { stopSubmit } from \"redux-form\";\r\nimport { photosType, postType,profileType,contactType } from \"../types/types\";\r\nimport { Dispatch } from 'redux';\r\nconst ADD_POST = \"ADD-POST\";\r\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\";\r\nconst GET_STATUS = \"GET_STATUS\";\r\nconst SAVE_PHOTO_SUCCESS = \"SAVE_PHOTO_SUCCESS\";\r\n\r\nexport type initialStateType = typeof initialState\r\nlet initialState = {\r\n  post: [\r\n    { id: 1, message: \"Как дела\", count: 2 },\r\n    { id: 2, message: \"нормально\", count: 5 },\r\n  ]as Array<postType>,\r\n  //newPostText: \"\",\r\n  profile:null as profileType|null,\r\n  status: \"\",\r\n  newPostText: \"\"\r\n};\r\n//начальный state\r\nconst profileReduser = (state = initialState, action:any):initialStateType => {\r\n  switch (action.type) {\r\n    case ADD_POST:\r\n      // скобка {} чтобы писать одну и ту же переменную\r\n      // let stateCopy тут и ниже\r\n      let newPost = {\r\n        id: 3,\r\n       message: action.newPostText,\r\n        count: 0,\r\n      };\r\n      return {\r\n        ...state,\r\n        post: [...state.post, newPost],\r\n        //it is array []\r\n       // newPostText: \"\", // стираю текст в textarea\r\n        //после return функция не выполняется это вместо break\r\n      };\r\n    case SET_USER_PROFILE:\r\n      return {\r\n        ...state,\r\n        profile: action.profile,\r\n      };\r\n    case GET_STATUS:\r\n      return {\r\n        ...state,\r\n        status: action.status,\r\n      };\r\n    case SAVE_PHOTO_SUCCESS:\r\n      return {\r\n        ...state,\r\n        profile: { ...state.profile,\r\n        photos: action.photos}as profileType// после испаравить\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\ntype ActionTypes= addhhPostActionCreatorType|setUserProfileAcType|\r\ngetuStatusAcType|savePhotoSuccessAcType\r\ntype addhhPostActionCreatorType={\r\n  type:typeof ADD_POST,\r\n   newPostText:string\r\n}\r\nexport const addhhPostActionCreator = (newPostText:string):addhhPostActionCreatorType => ({ type: ADD_POST, newPostText });\r\ntype setUserProfileAcType={\r\n  type:typeof SET_USER_PROFILE,\r\n  profile:profileType\r\n}\r\nexport const setUserProfile = (profile:profileType):setUserProfileAcType => ({\r\n  type: SET_USER_PROFILE,\r\n  profile,\r\n});\r\ntype getuStatusAcType={\r\n  type:typeof GET_STATUS,\r\n  status:string\r\n}\r\nexport const getuStatus = (status:string):getuStatusAcType => ({\r\n  type: GET_STATUS,\r\n  status,\r\n});\r\ntype savePhotoSuccessAcType={\r\n  type:typeof SAVE_PHOTO_SUCCESS,\r\n  photos:photosType\r\n}\r\nexport const savePhotoSuccess = (photos:photosType):savePhotoSuccessAcType => ({\r\n  type: SAVE_PHOTO_SUCCESS,\r\n  photos,\r\n});\r\n//thunk\r\ntype DispatchType = Dispatch<ActionTypes>\r\ntype GetStateType = () => AppStateType\r\ntype ThunkType = ThunkAction<Promise<void>\r\n  , AppStateType, unknown, ActionTypes>\r\nexport const profilesData = (userIdd:number) => async(dispatch:DispatchType, getState:GetStateType) =>{\r\n  // return (dispatch) => {\r\n   let response=await profileApi.getProfileApi(userIdd)\r\n    // .then((response) => {\r\n      //запрос в api.js\r\n      dispatch(setUserProfile(response.data));\r\n  //   });\r\n  // }\r\n}\r\nexport const getStatus = (userIdd:number):ThunkType =>async(dispatch) => {\r\n  // return (dispatch) => {\r\n    let response=await profileApi.getUserStatus(userIdd)\r\n    // .then((response) => {\r\n      //запрос в api.js получить статус\r\n      dispatch(getuStatus(response.data));\r\n  //   });\r\n  // }\r\n}\r\nexport const updateUserStatus = (status:string):ThunkType =>async(dispatch) => {\r\n  // return (dispatch) => {\r\n    let response=await profileApi.updateStatus(status)\r\n    // .then((response) => {\r\n      //запрос в api.js установить статус\r\n      if (response.data.resultCode === 0) {\r\n        dispatch(getuStatus(status));\r\n      }\r\n      //вызывается тот же экшн креатор ,что и выше  и обновляется status\r\n  //   });\r\n  // }\r\n}\r\nexport const savePhoto = (file:any):ThunkType =>async(dispatch) => {\r\n  // return (dispatch) => {\r\n    let response=await profileApi.savePhoto(file)\r\n      //запрос в api.js \r\n      if (response.data.resultCode === 0) {\r\n        dispatch(savePhotoSuccess(response.data.data.photos));\r\n      }\r\n}\r\nexport const saveProfile = (profile:profileType) =>async(dispatch:any,getState:any) => {\r\n  const useruidi= getState().auth.id\r\n  // getState достал значение из глобального стейта \r\n    let response=await profileApi.saveProfile(profile)\r\n      //запрос в api.js .Сохранил изменения профиля на сервере \r\n      if (response.data.resultCode === 0) {\r\n        dispatch(profilesData(useruidi));\r\n            //  обновил профиль\r\n      }\r\n      else{\r\n        dispatch(stopSubmit(\"edit-profile\", {\"contacts\":{ \"facebook\": response.data.messages[0]} }));\r\n        // contacts- объект facebook-ключ в объекте.\r\n        //  Надо распарсить строку и сделать для всех input\r\n        return Promise.reject(response.data.messages[0])\r\n      }\r\n}\r\nexport default profileReduser;\r\n","C:\\Users\\рома\\Documents\\react2\\src\\Redux\\usersReduser.ts",["204","205","206"],"C:\\Users\\рома\\Documents\\react2\\src\\Redux\\new-store.ts",[],"C:\\Users\\рома\\Documents\\react2\\src\\components\\Users\\UsersContainer.tsx",[],"C:\\Users\\рома\\Documents\\react2\\src\\Redux\\users-selectors.ts",[],"C:\\Users\\рома\\Documents\\react2\\src\\components\\Users\\UsersApiContainer.tsx",[],"C:\\Users\\рома\\Documents\\react2\\src\\components\\Users\\Users.tsx",[],"C:\\Users\\рома\\Documents\\react2\\src\\components\\Users\\User.tsx",["207","208","209"],"import React ,{FC}from \"react\";\r\nimport styles from \"./Users.module.css\";\r\nimport userPhoto from \"../../assets/images/users.png\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Pagination from \"../common/paginator/Pagination\";\r\ntype PropsType={\r\n  user:any\r\n  followingInProgress:any\r\n  follow:(userId:number)=>void\r\n  unfollow:(userId:number)=>void\r\n}\r\nlet User:React.FC<PropsType> = ({user,followingInProgress,follow,unfollow}) => {\r\n  return (\r\n        <div>\r\n          <span>\r\n            <div>\r\n              <NavLink to={\"/profile/\" + user.id}>\r\n                <img\r\n                  src={user.photos.small !== null ? user.photos.small : userPhoto}\r\n                  className={styles.userPhoto}\r\n                />\r\n              </NavLink>\r\n            </div>\r\n            <div>\r\n              {\r\n                user.followed ? (\r\n                    <button disabled={followingInProgress.some((id:number)=>id===user.id)}\r\n                    onClick={() => {\r\n                      follow(user.id);\r\n                      //вызываю thunk из редюсера, delete\r\n                     } }\r\n                    >Follow\r\n                  </button>\r\n                ) : (\r\n                  <button disabled={followingInProgress.some((id:number)=>id===user.id)}\r\n                    onClick={() => {\r\n                    unfollow(user.id);\r\n                      //вызываю thunk из редюсера\r\n                    } }\r\n                  >\r\n                    Unfollow\r\n                  </button>\r\n                )\r\n                //тринарное выражение\r\n              }\r\n            </div>\r\n          </span>\r\n          <span>\r\n            <span>\r\n              <div>{user.name}</div>\r\n              <div>{user.status}</div>\r\n            </span>\r\n            <span>\r\n              <div>{\"user.location.city\"}</div>\r\n              <div>{\"user.location.cantry\"}</div>\r\n            </span>\r\n          </span>\r\n        </div>\r\n  );\r\n}; //end Users\r\nexport default User;\r\n","C:\\Users\\рома\\Documents\\react2\\src\\components\\common\\paginator\\Pagination.tsx",[],"C:\\Users\\рома\\Documents\\react2\\src\\components\\Profile\\Profileinfo\\ProfileStatus.tsx",["210"],"import classes from \"./Profileinfo.module.css\"\r\nimport React, { ChangeEvent } from \"react\";\r\n//  отключен\r\n//  отключен\r\n//  отключен\r\n//  отключен\r\n//  отключен\r\n//  отключен\r\ntype PropsType={\r\n    status:string\r\n    updateUserStatus:(status:string)=>void\r\n}\r\ntype StateType={\r\n    editMode:boolean\r\n    status:string\r\n}\r\nclass ProfileStatus extends React.Component<PropsType,StateType> {\r\n    state = {\r\n        editMode: true,\r\n        status: this.props.status\r\n    }\r\n    //локальный стейт\r\n    activateEditMode = () => {\r\n        this.setState(\r\n            { editMode: true }\r\n        );\r\n    };\r\n    //setState -- метод React.Component\r\n    //setState асинхронен\r\n    deactivateEditMode = () => {\r\n        this.setState(\r\n            { editMode: false }\r\n        );\r\n        this.props.updateUserStatus(this.state.status);\r\n        //взял status из локального state\r\n    };\r\n    //урок 71 фокус\r\n    onStatusChange = (e:ChangeEvent<HTMLInputElement>) => {\r\n        // ChangeEvent импортировал из react for TypeScript\r\n        this.setState(\r\n            { status: e.currentTarget.value });\r\n    }\r\n    componentDidUpdate(prevProps:PropsType, prevState:StateType) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState(\r\n                { status: this.props.status }\r\n            );\r\n        };\r\n    }\r\n    render() {\r\n        return (\r\n            <div>{!this.state.editMode &&\r\n                //если editMode в стейте=false ,то...\r\n                <div>\r\n                    <span onDoubleClick={this.activateEditMode}>{this.props.status || \"no status\"}</span>\r\n                </div>\r\n            }\r\n                {this.state.editMode &&\r\n                    <div>\r\n                        <input onChange={this.onStatusChange}/*хз так как value зафиксирован*/\r\n                            autoFocus={true}\r\n                            onBlur={this.deactivateEditMode} value={this.state.status} />\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n};\r\nexport default ProfileStatus;\r\n","C:\\Users\\рома\\Documents\\react2\\src\\api\\api.ts",["211"],"import axios, { AxiosResponse } from \"axios\";\r\nimport { profileType } from \"../types/types\";\r\n// * as убрал\r\n\r\nconst instance = axios.create({\r\n  withCredentials: true,/* передать куку*/\r\n  baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n  headers: { \"API-KEY\": \"66060485-250e-40e6-994f-36765b804827\" },\r\n});\r\n//instance- задал параметры\r\nexport const usersApi = {\r\n  getUsera(currentPage = 1, pageSize = 10) {\r\n    return (\r\n      instance\r\n        .get(`users?page=${currentPage}&count=${pageSize}`)\r\n        //запрос в userApiContainer\r\n        //currentPage- выделен жирным номер страницы\r\n        //pageSize: 10, -сколько показывать юзеров\r\n\r\n        .then((response) => {\r\n          return response.data;\r\n        })\r\n    );\r\n  },\r\n\r\n  followApi(userId: number) {\r\n    return instance.delete(\r\n      `follow/${userId}`\r\n    );\r\n  },\r\n  unfollowApi(userId: number) {\r\n    return instance.post(\r\n      `follow/${userId}`\r\n    );\r\n  },\r\n  getProfileApi(userIdd: number) {\r\n    console.warn('Obsolete method. Please profileApi object.');\r\n    return profileApi.getProfileApi(userIdd)\r\n  }\r\n};\r\n// *******************************\r\nexport const profileApi = {\r\n  getProfileApi(userIdd: number) {\r\n    return instance.get(`profile/` + userIdd)\r\n  },\r\n  //получил : ищу работу... фото и др.\r\n  getUserStatus(userIdd: number) {\r\n    return instance.get(`profile/status/` + userIdd)\r\n  },\r\n  updateStatus(status: string) {\r\n    return instance.put(`profile/status/`, { status: status })\r\n  },\r\n  // отправляю на сервер объект -> status:status\r\n  savePhoto(photoFile: any) {\r\n    let formData = new FormData();\r\n    formData.append(\"image\", photoFile);\r\n    return instance.put(`profile/photo`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    })\r\n  },\r\n  saveProfile(profile: profileType) {\r\n    return instance.put(`profile`, profile)\r\n  },\r\n};\r\n// *****************************\r\nexport enum ResultCodeEnum{\r\n  Success=0,\r\n  Error=1\r\n}\r\nexport enum ResultCodeforCaptcha{\r\n  CaptchaIsRequired=10\r\n}\r\ntype MeResponceType = {\r\n  data: {\r\n    id: number\r\n    email: string\r\n    login: string\r\n  }\r\n  resultCode:ResultCodeEnum\r\n  messages:Array<string>\r\n}\r\ntype LoginResponceType = {\r\n  data: {\r\n    userid: number\r\n  }\r\n  resultCode:ResultCodeEnum|ResultCodeforCaptcha\r\n  messages:Array<string>\r\n}\r\nexport const loginApi = {\r\n  me() {\r\n    return instance.get<MeResponceType>(`auth/me`).then(res=>res.data)//107 15:25\r\n  },\r\n  login(email: string, password: string, rememberMe: boolean = false /*если не будет rememberMe*/\r\n    , captcha: null | string = null) {\r\n    return instance.post<LoginResponceType>(`auth/login`, { email, password, rememberMe, captcha })\r\n    .then(res=>res.data)\r\n  },\r\n  logout() {\r\n    return instance.delete(`auth/login`);\r\n  }\r\n}\r\n// *************************\r\nexport const securityApi = {\r\n  getCaptchaUrl() {\r\n    return instance.get(`security/get-captcha-url`)\r\n  }\r\n};","C:\\Users\\рома\\Documents\\react2\\src\\components\\Login\\Login.tsx",["212","213"],"import React, { FC } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { required } from \"../../utils/validator/validators\";\r\nimport { input } from \"../common/FormControls/FormControls\";\r\nimport { login } from \"../../Redux/authReduser\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport styles from \"../common/FormControls/FormControls.module.css\";\r\nimport { createField } from \"../common/FormControls/FormControls\";\r\nimport { AppStateType } from \"../../Redux/new-store\";\r\ntype LoginFormOwnProps={\r\n  capchaUrl:string|null\r\n}\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType,LoginFormOwnProps>& LoginFormOwnProps > = \r\n({ handleSubmit, error, capchaUrl }) => {\r\n  return <form onSubmit={handleSubmit}>\r\n    {createField<LoginFormValuesTypeKeys>(\"Email\", \"email\", [required], input,)}\r\n    {createField<LoginFormValuesTypeKeys>(\"Password\", \"password\", [required], input, { type: \"password\" })}\r\n    {createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", [], input, { type: \"checkbox\" }, \"remember me\")}\r\n    {/*          <LoginFormValuesTypeKeys> описание ниже */}\r\n    {/* ниже капча */}\r\n    {capchaUrl && <img src={capchaUrl} />}\r\n    {capchaUrl && createField<LoginFormValuesTypeKeys>(\"Введите капчу\", \"captcha\", [required], input, {})}\r\n\r\n    {error && <div className={styles.formSummaryError}>\r\n      {error}\r\n    </div>}\r\n    <div>\r\n      <button>Login</button>\r\n    </div>\r\n  </form>\r\n  //внутри handleSubmit находится formData\r\n};\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType,LoginFormOwnProps>({ form: \"login\" })(LoginForm);\r\n/*обворачиваем (хоком reduxForm) компоненту LoginForm\r\n и получаем контейнерную  компоненту LoginReduxForm */\r\ntype MapStateToPropsType = {\r\n  isAuth: boolean,\r\n  capchaUrl: string | null\r\n}\r\ntype MapDispatchPropsType = {\r\n  login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\ntype LoginFormValuesType = {\r\n  email: string,\r\n  password: string,\r\n  rememberMe: boolean,\r\n  captcha: string\r\n}\r\ntype LoginFormValuesTypeKeys=Extract <keyof LoginFormValuesType,string>\r\n// LoginFormValuesType,string если строка то возьми ключи\r\n// получил ключи email,password,rememberMe,captcha и выше вставил их в createField<LoginFormValuesTypeKeys>\r\n// теперь если напишу другой ключ будет ошибка\r\nconst Login2: React.FC<MapStateToPropsType & MapDispatchPropsType> = (props) => {\r\n  const aonSubmit = (formData: LoginFormValuesType) => {\r\n    //75 урок 32:00 formData значение из reduxForm->handleSubmit\r\n    props.login(formData.email, formData.password, formData.rememberMe, formData.captcha);\r\n    //login с маленькой\r\n    //78 18:40 логинизация\r\n    //console.log(formData);\r\n    //без console.log не работает\r\n    /* mapStateToProps = (state) => {\r\n      return { form: state.form };\r\n    };\r\n    let mapDispatchToProps = (dispatch) => {\r\n      return {\r\n        onSubmit: () => {\r\n          dispatch(onSubmitAC());\r\n        },\r\n      };\r\n    };*/\r\n  }\r\n  if (props.isAuth) {\r\n    return <Redirect to={'/profile'} />\r\n  }\r\n  return <div>\r\n    <h1>LOGIN</h1>\r\n    <LoginReduxForm onSubmit={aonSubmit} capchaUrl={props.capchaUrl} />\r\n  </div>\r\n};\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n  isAuth: state.auth.isAuth,\r\n  capchaUrl: state.auth.capchaUrl\r\n})\r\nexport default connect(mapStateToProps, { login })(Login2);\r\n//login приходит из authReduser login с маленькой\r\n","C:\\Users\\рома\\Documents\\react2\\src\\utils\\validator\\validators.ts",[],"C:\\Users\\рома\\Documents\\react2\\src\\components\\common\\FormControls\\FormControls.tsx",["214"],"import { FieldValidatorType } from '../../../utils/validator/validators';\r\nimport React from \"react\";\r\nimport styles from \"./FormControls.module.css\";\r\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from \"redux-form\";\r\n// type FormControlParamtype={\r\n//     meta:WrappedFieldMetaProps\r\n//         }\r\nexport const textarea: React.FC<WrappedFieldProps> = ({ input, meta, ...props }) => {\r\n    //это рестоператор.props содержит все кроме input и meta\r\n    /* WrappedFieldProps взял внутри Field\r\n     }*/\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div> <textarea {...input} {...props} /> </div>\r\n            {hasError && <span>{meta.error} </span>}\r\n        </div>\r\n )\r\n}\r\nexport const input: React.FC<WrappedFieldProps> = ({ input, meta, ...props }) => {\r\n    //это рестоператор.props содержит все кроме input и meta\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div> <input {...input} {...props} /> </div>\r\n            {hasError && <span>{meta.error} </span>}\r\n        </div>\r\n )\r\n}\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n    // extends string чтобы  name не выдавала ошибку\r\n    name: FormKeysType,\r\n    validators: Array<FieldValidatorType>,\r\n    component: React.FC<WrappedFieldProps>,\r\n    props = {}, text = \"\") {\r\n    return <div> <Field placeholder={placeholder}\r\n        name={name}\r\n        validate={validators}\r\n        component={component}\r\n        {...props} />{text}\r\n    </div>\r\n}",{"ruleId":"215","replacedBy":"216"},{"ruleId":"217","replacedBy":"218"},{"ruleId":"219","severity":1,"message":"220","line":4,"column":17,"nodeType":"221","messageId":"222","endLine":4,"endColumn":23},{"ruleId":"223","severity":1,"message":"224","line":4,"column":7,"nodeType":"225","endLine":4,"endColumn":99},{"ruleId":"223","severity":1,"message":"224","line":9,"column":7,"nodeType":"225","endLine":9,"endColumn":99},{"ruleId":"223","severity":1,"message":"224","line":14,"column":7,"nodeType":"225","endLine":14,"endColumn":99},{"ruleId":"219","severity":1,"message":"226","line":1,"column":13,"nodeType":"221","messageId":"222","endLine":1,"endColumn":18},{"ruleId":"223","severity":1,"message":"224","line":6,"column":7,"nodeType":"225","endLine":6,"endColumn":30},{"ruleId":"227","severity":1,"message":"228","line":32,"column":40,"nodeType":"229","messageId":"230","endLine":32,"endColumn":42},{"ruleId":"231","severity":1,"message":"232","line":30,"column":9,"nodeType":"225","endLine":30,"endColumn":12},{"ruleId":"231","severity":1,"message":"232","line":40,"column":9,"nodeType":"225","endLine":40,"endColumn":12},{"ruleId":"219","severity":1,"message":"233","line":1,"column":10,"nodeType":"221","messageId":"222","endLine":1,"endColumn":17},{"ruleId":"219","severity":1,"message":"234","line":4,"column":8,"nodeType":"221","messageId":"222","endLine":4,"endColumn":21},{"ruleId":"223","severity":1,"message":"224","line":34,"column":7,"nodeType":"225","endLine":34,"endColumn":122},{"ruleId":"223","severity":1,"message":"224","line":37,"column":9,"nodeType":"225","endLine":37,"endColumn":89},{"ruleId":"227","severity":1,"message":"235","line":58,"column":47,"nodeType":"229","messageId":"230","endLine":58,"endColumn":49},{"ruleId":"219","severity":1,"message":"236","line":14,"column":7,"nodeType":"221","messageId":"222","endLine":14,"endColumn":21},{"ruleId":"219","severity":1,"message":"237","line":1,"column":8,"nodeType":"221","messageId":"222","endLine":1,"endColumn":15},{"ruleId":"238","severity":1,"message":"239","line":14,"column":16,"nodeType":"240","endLine":14,"endColumn":28},{"ruleId":"223","severity":1,"message":"224","line":5,"column":7,"nodeType":"225","endLine":5,"endColumn":75},{"ruleId":"215","replacedBy":"216"},{"ruleId":"217","replacedBy":"218"},{"ruleId":"241","severity":1,"message":"242","line":5,"column":43,"nodeType":"221","messageId":"222","endLine":5,"endColumn":54},{"ruleId":"227","severity":1,"message":"228","line":70,"column":57,"nodeType":"229","messageId":"230","endLine":70,"endColumn":59},{"ruleId":"241","severity":1,"message":"243","line":96,"column":6,"nodeType":"221","messageId":"222","endLine":96,"endColumn":18},{"ruleId":"241","severity":1,"message":"244","line":97,"column":6,"nodeType":"221","messageId":"222","endLine":97,"endColumn":18},{"ruleId":"241","severity":1,"message":"245","line":1,"column":16,"nodeType":"221","messageId":"222","endLine":1,"endColumn":18},{"ruleId":"241","severity":1,"message":"246","line":5,"column":8,"nodeType":"221","messageId":"222","endLine":5,"endColumn":18},{"ruleId":"223","severity":1,"message":"224","line":18,"column":17,"nodeType":"225","endLine":21,"endColumn":19},{"ruleId":"241","severity":1,"message":"237","line":1,"column":8,"nodeType":"221","messageId":"222","endLine":1,"endColumn":15},{"ruleId":"241","severity":1,"message":"247","line":1,"column":17,"nodeType":"221","messageId":"222","endLine":1,"endColumn":30},{"ruleId":"241","severity":1,"message":"245","line":1,"column":17,"nodeType":"221","messageId":"222","endLine":1,"endColumn":19},{"ruleId":"223","severity":1,"message":"224","line":22,"column":19,"nodeType":"225","endLine":22,"endColumn":42},{"ruleId":"241","severity":1,"message":"248","line":4,"column":17,"nodeType":"221","messageId":"222","endLine":4,"endColumn":38},"no-native-reassign",["249"],"no-negated-in-lhs",["250"],"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'axios' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'NavLink' is defined but never used.","'ProfileStatus' is defined but never used.","Expected '===' and instead saw '=='.","'newPostElement' is assigned a value but never used.","'classes' is defined but never used.","react-hooks/exhaustive-deps","Assignments to the 'setStatus' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","@typescript-eslint/no-unused-vars","'contactType' is defined but never used.","'DispatchType' is defined but never used.","'GetStateType' is defined but never used.","'FC' is defined but never used.","'Pagination' is defined but never used.","'AxiosResponse' is defined but never used.","'WrappedFieldMetaProps' is defined but never used.","no-global-assign","no-unsafe-negation"]