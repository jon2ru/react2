{"version":3,"sources":["components/Profile/Profileinfo/Profileinfo.module.css","hoc/withAuthRedirect.js","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/Profileinfo/ProfileStatusWithHooks.jsx","components/Profile/Profileinfo/ProfileStatus.jsx","components/Profile/Profileinfo/ProfileDataForm.jsx","components/Profile/Profileinfo/Profileinfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateUserStatus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","styles","formSummaryError","createField","input","textarea","type","Object","keys","contacts","map","key","classes","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contactTitle","contactValue","Contacts","Profileinfo","Preloader","src","width","height","descr","photos","large","userPhoto","avatar","target","files","length","savePhoto","console","log","initialValues","formData","saveProfile","then","Post","item","message","count","maxLength10","maxLengthCreator","MyPosts","memo","postElement","post","p","id","PostReduxForm","values","addPost","newPostText","newpost","Field","component","name","placeholder","validate","required","MyPostsContainer","profilePage","dispatch","addhhPostActionCreator","Profile","ProfileContainer","userIdd","match","params","userId","authorizedUserId","profilesData","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","withRouter"],"mappings":"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","file":"static/js/3.7951cd42.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descr\":\"Profileinfo_descr__1N2iy\",\"contact\":\"Profileinfo_contact__hsQDV\"};","import { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n    //беру из стейта\r\n});\r\n//на входе разные компоненты Component\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={\"/login\"} />;\r\n            //редирект если не залогинен\r\n          //пробовал свои мысли  if(this.props.dialogPages) alert(\"диалог\");\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n    let connectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return connectedAuthRedirectComponent;\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"MyPosts_post__2hIlM\",\"newpost\":\"MyPosts_newpost__31L6x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__NAUQa\"};","import classes from \"./Profileinfo.module.css\"\r\nimport React, { useState, useEffect } from \"react\";\r\n// import { useEffect } from \"react\";\r\n\r\nconst ProfileStatusWithHooks= (props) =>{\r\n   let [editMode,setEditMode]= useState(false)\r\n//    деструктуризация массива\r\n//    useState сидит в библиотеке react\r\n//useState возвращает первым номером значение и 2м ф. \r\n// которая меняет это значение(1-editMode,2-setEditMode)\r\nlet [status,setStatus]= useState(props.status)\r\n// раздробил локальный стейт на 2 части\r\nuseEffect( ()=>{\r\n    setStatus=(props.status);\r\n},[props.status])\r\n// зависишь от [props.status] если он поменялся то отрисуй\r\n// useEffect срабатывает после отрисовки компоненты\r\nconst activateEditMode = () => {\r\n  setEditMode(true)\r\n}\r\nconst deactivateEditMode = () => {\r\n    setEditMode(false)\r\n    props.updateUserStatus(status);\r\n}\r\nconst onStatusChange = (e) => {\r\n    setStatus(e.currentTarget.value);\r\n    // закидываю вводимые символы в props.status\r\n}\r\n            return (\r\n            <div>{!editMode&&//если editMode в стейте=false ,то...\r\n                <div>\r\n                   <b>status:</b> <span onDoubleClick={activateEditMode}>{props.status ||\"no status\"}</span>\r\n                </div>\r\n            }\r\n                {editMode &&\r\n                    <div>\r\n                        <input onChange={onStatusChange} \r\n                        // при изменениии в input\r\n                        value={status}\r\n                         autoFocus={true}\r\n                          onBlur={deactivateEditMode} />\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    \r\n};\r\nexport default ProfileStatusWithHooks;\r\n","import classes from \"./Profileinfo.module.css\"\r\nimport React from \"react\";\r\n//  отключен\r\n//  отключен\r\n//  отключен\r\n//  отключен\r\n//  отключен\r\n//  отключен\r\nclass ProfileStatus extends React.Component {\r\n    state = {\r\n        editMode: true,\r\n        status: this.props.status\r\n    }\r\n    //локальный стейт\r\n    activateEditMode = () => {\r\n        this.setState(\r\n            { editMode: true }\r\n        );\r\n    };\r\n    //setState -- метод React.Component\r\n    //setState асинхронен\r\n    deactivateEditMode = () => {\r\n        this.setState(\r\n            { editMode: false }\r\n        );\r\n        this.props.updateUserStatus(this.state.status);\r\n        //взял status из локального state\r\n    };\r\n    //урок 71 фокус\r\n    onStatusChange = (e) => {\r\n        this.setState(\r\n            { status: e.currentTarget.value });\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState(\r\n                { status: this.props.status }\r\n            );\r\n        };\r\n    }\r\n    render() {\r\n        return (\r\n            <div>{!this.state.editMode &&\r\n                //если editMode в стейте=false ,то...\r\n                <div>\r\n                    <span onDoubleClick={this.activateEditMode}>{this.props.status || \"no status\"}</span>\r\n                </div>\r\n            }\r\n                {this.state.editMode &&\r\n                    <div>\r\n                        <input onChange={this.onStatusChange}/*хз так как value зафиксирован*/\r\n                            autoFocus={true}\r\n                            onBlur={this.deactivateEditMode} value={this.state.status} />\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n};\r\nexport default ProfileStatus;\r\n","import React from \"react\";\r\nimport styles from \"../../common/FormControls/FormControls.module.css\"\r\nimport classes from \"./Profileinfo.module.css\"\r\nimport { reduxForm } from \"redux-form\";\r\nimport { createField, textarea,input } from \"../../common/FormControls/FormControls\";\r\nconst ProfileDataForm = ({ handleSubmit,profile,error }) => {\r\n  return <form onSubmit={handleSubmit}>\r\n    <div><button>save</button></div>\r\n    {error&&<div className={styles.formSummaryError}>\r\n     {error}\r\n    </div>}\r\n    <div>avat+descr</div>\r\n    <div>Имя:{createField(\"Full name\", \"fullName\", [], input)}</div>\r\n    <div>обо мне:{createField(\"about me\", \"aboutMe\", [], textarea)}</div>\r\n    <div>ищешь работу?\r\n    {createField(\"\", \"lookingForAJob\", [], input,{type:\"checkbox\"})}</div>\r\n    <div>\r\n      какую хочешь работу? \r\n      {createField(\"Description\", \"lookingForAJobDescription\", [], textarea)}\r\n    </div>\r\n     <div>\r\n      контакты:{Object.keys(profile.contacts).map(key => {\r\n        // Object.keys(obj) – возвращает массив ключей.\r\n        return <div key={key} className={classes.contact}>\r\n          {key}:{createField(key, \"contacts.\"+key, [], input)}\r\n          {/* вывожу facebook, vk и другие */}\r\n        </div>\r\n       \r\n      })}\r\n    </div> \r\n  </form>\r\n}\r\nconst ProfileDataFormReduxForm = reduxForm({ form: \"edit-profile\" })(ProfileDataForm);\r\nexport default ProfileDataFormReduxForm;","\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport classes from \"./Profileinfo.module.css\"\r\nimport ProfileStatus from \"./ProfileStatus\"\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"./../../../assets/images/users.png\";\r\nimport { useState } from \"react\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nconst Profileinfo = (props) => {\r\n  let [editMode,setEditMode]= useState(false)\r\n//    деструктуризация массива\r\n//    useState сидит в библиотеке react\r\n//useState возвращает первым номером значение и 2м ф. \r\n// которая меняет это значение(1-editMode,2-setEditMode)\r\n  if (!props.profile) {\r\n    return <Preloader />\r\n  }\r\n  const onMainPhotoSelected = (e) => {\r\n    if (e.target.files.length) {\r\n      // если фото имеет длинну-не пустая\r\n      props.savePhoto(e.target.files[0])\r\n      // то возьми это фото\r\n      console.log(props.savePhoto)\r\n    }\r\n  }\r\n  const onSubmit = (formData) => {\r\n        props.saveProfile(formData).then(()=>{\r\n         setEditMode(false);\r\n        });\r\n        // async await не сработал\r\n    }\r\n  return (\r\n    <div>\r\n      <img src=\"https://i.pinimg.com/originals/f5/39/b6/f539b6967cb0f250d4e05cc133a8c87d.jpg\" width=\"800\" height=\"400\" />\r\n      {/* пляж */}\r\n      <div className={classes.descr}>\r\n        <img src={props.profile.photos.large || userPhoto} className={classes.avatar} />\r\n        {props.isOwner && <input type=\"file\" onChange={onMainPhotoSelected} />}\r\n        {/* если есть isOwner покажи кнопку с выбором файла */}\r\n       {editMode?\r\n       <ProfileDataForm initialValues={props.profile} profile={props.profile} onSubmit={onSubmit}/>:\r\n      //  initialValues метод redux-form. При перезагрузке страницы ,\r\n      //  чтобы сохранялись в input и textarea введенные значения\r\n       <ProfileData goToEditMode={()=>{setEditMode(true)}} isOwner={props.isOwner} profile={props.profile} />}\r\n        {/* тринарное выражение на верху */}\r\n        <ProfileStatusWithHooks status={props.status}\r\n          updateUserStatus={props.updateUserStatus} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nconst ProfileData = ({ profile,isOwner,goToEditMode }) => {\r\n  return <div>\r\n    {isOwner&&<div><button onClick={goToEditMode}>edit</button></div>}\r\n    <div>avat+descr</div>\r\n    <div>Имя:{profile.fullName}</div>\r\n    <div>обо мне: {profile.aboutMe}</div>\r\n    <div>ищешь работу?{profile.lookingForAJob == true ? 'Да' : 'Нет'}</div>\r\n    <div>\r\n      какую хочешь работу? {profile.lookingForAJobDescription}\r\n    </div>\r\n    <div>\r\n      контакты:{Object.keys(profile.contacts).map(key => {\r\n        // Object.keys(obj) – возвращает массив ключей.\r\n        return <Contacts key={key} contactTitle={key} contactValue={profile.contacts[key]} />\r\n        // contactValue  пример: let abv={\r\n        //  github: qwerty\r\n        //     vk: trytry\r\n        //     facebook: popop}\r\n        //     abv[facebook] вернет popop\r\n        // key={key} зачем не понял\r\n      })}\r\n    </div>\r\n  </div>\r\n}\r\nconst Contacts = ({ contactTitle, contactValue }) => {\r\n  return <div className={classes.contact}>\r\n    {contactTitle}:{contactValue}\r\n  </div>\r\n}\r\n\r\nexport default Profileinfo;\r\n","import classes from \"./Post.module.css\";\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={classes.item}>\r\n      <img src=\"http://pngimg.com/uploads/spongebob/spongebob_PNG8.png\" />\r\n      {/* <img src=\"https://kurer-sreda.ru/wp-contenpt/uloads/2020/06/1-48-800x663.png\" /> */}\r\n\r\n      {props.message}\r\n      <div>\r\n        <span>Like {props.count}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import classes from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { maxLengthCreator, required } from \"../../../utils/validator/validators\";\r\nimport { input } from \"../../common/FormControls/FormControls\";\r\n// console.log(MyPosts);\r\nconst maxLength10=maxLengthCreator(10);\r\nconst MyPosts =React.memo(props => {\r\n  // React.memo если пропсы не поменялись.то не рендерь\r\n  let postElement = props.post.map((p) => (\r\n    <Post key={p.id} message={p.message} count={p.count} />\r\n  ));\r\n  let newPostElement = React.createRef(); /* 31 реакт создай ссылку*/\r\n  let addhhPost = (values) => {\r\n    // let newtext = newPostElement.current.value; -перенес в state\r\n    props.addPost(values.newPostText);\r\n    //props.dispatch(addhhPostActionCreator());\r\n    /*31,32 вызываю функцию addPost\r\n      в state.js */\r\n    /* props.updatenewPost('');обнуляю значение в textarea \r\n    -перенес в state.js */\r\n  };\r\n  // let onPostChange = () => {\r\n  //   let newtext5 = newPostElement.current.value;\r\n  //   props.updateNewPostText(newtext5);\r\n  //   //let action=(onPostChangeActionCreator(newtext5))\r\n  //   //создал action для примера чтобы видеть процесс\r\n  //   //props.dispatch(action);\r\n  //   //при изменении в textarea передаю данные в state.js\r\n  // };\r\n  return (\r\n    <div className={classes.post}>\r\n      <h2>My Post</h2>\r\n      <div>\r\n        <PostReduxForm onSubmit={addhhPost}/>\r\n      </div>\r\n      <div className={classes.newpost}>{postElement}</div>\r\n    </div>\r\n  );\r\n});\r\nconst myPostForm= (props) => {\r\n  return(\r\n  <form onSubmit={props.handleSubmit}>\r\n    <div>\r\n      <Field component={input} name=\"newPostText\" placeholder=\"введите\" \r\n      validate={[required,maxLength10]} />\r\n    </div>\r\n    <div>\r\n      <button >Add post</button>\r\n    </div>\r\n  </form>\r\n  )\r\n};\r\nconst PostReduxForm = reduxForm({ form: \"myPostText\" })(myPostForm);\r\nexport default MyPosts;\r\n","// console.log(MyPosts);\r\nimport {\r\n  addhhPostActionCreator} from \"../../../Redux/profileReduser\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport { connect } from \"react-redux\";\r\n\r\n/*const MyPostsContainer = () => {\r\n  \r\n  return (\r\n    <StoreContext.Consumer>\r\n       {\r\n      (store)=> {\r\n        let state = store.getState();\r\n        let addhhPost = () => {\r\n          // let newtext = newPostElement.current.value; -перенес в state\r\n          store.dispatch(addhhPostActionCreator());\r\n          /*31,32 вызываю функцию? addPost\r\n          в state.js */\r\n/* props.updatenewPost('');обнуляю значение в textarea \r\n          -перенес в state.js\r\n           \r\n        };\r\n        let onPostChange = (newtext5) => {\r\n          let action = onPostChangeActionCreator(newtext5);\r\n          //создал action для примера чтобы видеть процесс\r\n          store.dispatch(action);\r\n          //при изменении в textarea передаю данные в state.js\r\n                };\r\n      return <MyPosts\r\n        addPost={addhhPost}\r\n        updateNewPostText={onPostChange}\r\n        post={state.profilePage.post}\r\n        newPostText={state.profilePage.newPostText}\r\n      />\r\n   }\r\n    }\r\n    </StoreContext.Consumer>\r\n  );\r\n};*/\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    post: state.profilePage.post,\r\n    newPostText: state.profilePage.newPostText,\r\n  };\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addPost: (newPostText) => {\r\n      dispatch(addhhPostActionCreator(newPostText));\r\n    },\r\n  };\r\n};\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\nexport default MyPostsContainer;\r\n","// import classes from \"./Profile.module.css\";\r\nimport Profileinfo from \"./Profileinfo/Profileinfo\";\r\n//import store, { addPost } from '../../Redux/State';\r\n\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n  return (\r\n    <div>\r\n      <Profileinfo isOwner={props.isOwner} \r\n      savePhoto={props.savePhoto}\r\n      profile={props.profile} \r\n      status={props.status}\r\n      updateUserStatus={props.updateUserStatus}\r\n      saveProfile={props.saveProfile}/>\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport { profilesData, getStatus, updateUserStatus,savePhoto,saveProfile } from \"../../Redux/profileReduser\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n  // чтобы код не писать дважды ниже создам refreshProfile\r\n  refreshProfile(){\r\n    let userIdd = this.props.match.params.userId\r\n    /*когда вызывается withRouter из url метод match возвращает params-userId\r\n    и получаю id юзера*/\r\n    if (!userIdd) {\r\n      userIdd = this.props.authorizedUserId;\r\n    }\r\n   /*  if (!userIdd) {\r\n      this.props.history.push(\"/login\");\r\n      когда жму кнопку вылогиниться нужно уйти из профиля,\r\n      но вроде и так срабатывает withAuthRedirect,\r\n       а это \"програмный\" редирект\r\n    } */\r\n    this.props.profilesData(userIdd);\r\n    this.props.getStatus(userIdd);\r\n    //вызываю thunk из редюсера\r\n  }\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  } //end componentDidMount\r\n  componentDidUpdate(prevProps,prevState,snapshot){\r\n    if (this.props.match.params.userId !=prevProps.match.params.userId){\r\n      this.refreshProfile();\r\n    }\r\n    // match из withRouter\r\n    // чтобы с чужого профиля переходить на свой при нажатии на profile\r\n  }\r\n  render() {\r\n    return <Profile {...this.props}\r\n              isOwner={!this.props.match.params.userId}\r\n              // если нет userId\r\n              status={this.props.status}\r\n              updateUserStatus={this.props.updateUserStatus}\r\n              profile={this.props.profile}/*profile={this.props.profile} -был заккоментирован*/ \r\n              savePhoto={this.props.savePhoto}/>\r\n  }\r\n} //end ProfileContainer\r\nlet mapStateToProps = (state) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserId: state.auth.id,\r\n  isAuth: state.auth.isAuth,\r\n});\r\nexport default compose(\r\n  connect(mapStateToProps, { profilesData, getStatus, updateUserStatus,savePhoto,saveProfile}),\r\n  withAuthRedirect,\r\n  //withRouter получаю из url нужную часть\r\n  withRouter\r\n)(ProfileContainer);\r\n//возьми ProfileContainer и закинь его в withRouter--> withAuthRedirect,а \r\n// потом результат в connect(mapStateToProps...\r\n"],"sourceRoot":""}