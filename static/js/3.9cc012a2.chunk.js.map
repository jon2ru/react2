{"version":3,"sources":["hoc/withAuthRedirect.js","components/Profile/Profileinfo/Profileinfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/Profileinfo/ProfileStatus.jsx","components/Profile/Profileinfo/ProfileStatusWithHooks.jsx","components/Profile/Profileinfo/Profileinfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateUserStatus","Profileinfo","profile","src","width","height","className","classes","descr","photos","large","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Preloader","Post","item","message","count","maxLength10","maxLengthCreator","MyPosts","memo","console","log","postElement","post","map","p","PostReduxForm","onSubmit","values","addPost","newPostText","newpost","reduxForm","form","handleSubmit","Field","component","input","name","placeholder","validate","required","MyPostsContainer","profilePage","dispatch","addhhPostActionCreator","Profile","ProfileContainer","userIdd","match","params","userId","authorizedUserId","profilesData","getStatus","compose","id","withRouter"],"mappings":"4NAIIA,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,SAIVE,EAAmB,SAACC,GAAe,IACtCC,EADqC,uKAGnC,OAAKC,KAAKC,MAAMN,OAGT,cAACG,EAAD,eAAeE,KAAKC,QAHI,cAAC,IAAD,CAAUC,GAAI,eAHV,GACXC,IAAML,WAStC,OADqCM,YAAQX,EAARW,CAAoCL,K,oBCjB7EM,EAAOC,QAAU,CAAC,MAAQ,6B,oBCA1BD,EAAOC,QAAU,CAAC,KAAO,sBAAsB,QAAU,2B,oBCAzDD,EAAOC,QAAU,CAAC,KAAO,qB,uICOGH,IAAML,U,QCuCnBS,EA3Ce,SAACN,GAAU,IAAD,EACTO,oBAAS,GADA,mBAChCC,EADgC,KACvBC,EADuB,OAMhBF,mBAASP,EAAMU,QANC,mBAMnCA,EANmC,KAM5BC,EAN4B,KAQxCC,qBAAW,WACPD,EAAWX,EAAMU,SACnB,CAACV,EAAMU,SAcG,OACA,iCAAOF,GACH,8BACI,sBAAMK,cAdD,WACvBJ,GAAY,IAaM,SAAwCT,EAAMU,QAAS,gBAG1DF,GACG,8BACI,uBAAOM,SAZR,SAACC,GACpBJ,EAAUI,EAAEC,cAAcC,QAaNA,MAAOP,EACNQ,WAAW,EACVC,OApBC,WACvBV,GAAY,GACZT,EAAMoB,iBAAiBV,YCKZW,EAtBK,SAACrB,GACnB,OAAKA,EAAMsB,QAKT,gCACE,qBAAKC,IAAI,+EAA+EC,MAAM,MAAMC,OAAO,QAC3G,qBAAKC,UAAWC,IAAQC,QACxB,qBAAKL,IAAKvB,EAAMsB,QAAQO,OAAOC,QAC/B,cAAC,EAAD,CAAwBpB,OAAQV,EAAMU,OACtCU,iBAAkBpB,EAAMoB,mBACxB,6CACA,sDAAUpB,EAAMsB,QAAQS,YACxB,0EAAe/B,EAAMsB,QAAQU,WAC7B,uGAAkD,GAA/BhC,EAAMsB,QAAQW,eAAwB,eAAM,wBAC/D,6IACwBjC,EAAMsB,QAAQY,gCAfjC,cAACC,EAAA,EAAD,K,4CCQIC,EAdF,SAACpC,GACZ,OACE,sBAAK0B,UAAWC,IAAQU,KAAxB,UACE,qBAAKd,IAAI,2DAGRvB,EAAMsC,QACP,8BACE,yCAAYtC,EAAMuC,e,kCCFpBC,EAAYC,YAAiB,IAC7BC,EAASxC,IAAMyC,MAAK,SAAA3C,GAExB4C,QAAQC,IAAI,UACZD,QAAQC,IAAI7C,GACZ,IAAI8C,EAAc9C,EAAM+C,KAAKC,KAAI,SAACC,GAAD,OAC/B,cAAC,EAAD,CAAMX,QAASW,EAAEX,QAASC,MAAOU,EAAEV,WAoBrC,OACE,sBAAKb,UAAWC,IAAQoB,KAAxB,UACE,yCACA,8BACE,cAACG,EAAD,CAAeC,SArBL,SAACC,GAEfpD,EAAMqD,QAAQD,EAAOE,kBAqBnB,qBAAK5B,UAAWC,IAAQ4B,QAAxB,SAAkCT,UAiBlCI,EAAgBM,YAAU,CAAEC,KAAM,cAAlBD,EAbJ,SAACxD,GACjB,OACA,uBAAMmD,SAAUnD,EAAM0D,aAAtB,UACE,8BACE,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAOC,KAAK,cAAcC,YAAY,6CACxDC,SAAU,CAACC,IAASzB,OAEtB,8BACE,sDAMSE,I,QCJAwB,EADU/D,aAbH,SAACV,GACrB,MAAO,CACLsD,KAAMtD,EAAM0E,YAAYpB,KACxBO,YAAa7D,EAAM0E,YAAYb,gBAGV,SAACc,GACxB,MAAO,CACLf,QAAS,SAACC,GACRc,EAASC,YAAuBf,QAIbnD,CAA6CuC,GCpCvD4B,EAVC,SAACtE,GACf,OACE,gCACE,cAAC,EAAD,CAAasB,QAAStB,EAAMsB,QAASZ,OAAQV,EAAMU,OACnDU,iBAAkBpB,EAAMoB,mBACxB,cAAC,EAAD,Q,wBCHAmD,E,kLAGF,IAAIC,EAAUzE,KAAKC,MAAMyE,MAAMC,OAAOC,OAGjCH,IACHA,EAAUzE,KAAKC,MAAM4E,kBAQvB7E,KAAKC,MAAM6E,aAAaL,GACxBzE,KAAKC,MAAM8E,UAAUN,K,+BAIrB,OAAO,cAAC,EAAD,2BAAazE,KAAKC,OAAlB,IAAyBU,OAAQX,KAAKC,MAAMU,OACjDU,iBAAkBrB,KAAKC,MAAMoB,iBAC7BE,QAASvB,KAAKC,MAAMsB,e,GAtBKpB,IAAML,WA+BtBkF,sBACb5E,aAPoB,SAACV,GAAD,MAAY,CAChC6B,QAAS7B,EAAM0E,YAAY7C,QAC3BZ,OAAQjB,EAAM0E,YAAYzD,OAC1BkE,iBAAkBnF,EAAME,KAAKqF,GAC7BtF,OAAQD,EAAME,KAAKD,UAGM,CAAEmF,iBAAcC,cAAW1D,uBACpDxB,IAEAqF,IAJaF,CAKbR","file":"static/js/3.9cc012a2.chunk.js","sourcesContent":["import { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n    //беру из стейта\r\n});\r\n//на входе разные компоненты Component\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={\"/login\"} />;\r\n            //редирект если не залогинен\r\n          //пробовал свои мысли  if(this.props.dialogPages) alert(\"диалог\");\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n    let connectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return connectedAuthRedirectComponent;\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descr\":\"Profileinfo_descr__1N2iy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"MyPosts_post__2hIlM\",\"newpost\":\"MyPosts_newpost__31L6x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__NAUQa\"};","import classes from \"./Profileinfo.module.css\"\r\nimport React from \"react\";\r\n//  отключен\r\n//  отключен\r\n//  отключен\r\n//  отключен\r\n//  отключен\r\n//  отключен\r\nclass ProfileStatus extends React.Component {\r\n    state = {\r\n        editMode: true,\r\n        status: this.props.status\r\n    }\r\n    //локальный стейт\r\n    activateEditMode = () => {\r\n        this.setState(\r\n            { editMode: true }\r\n        );\r\n    };\r\n    //setState -- метод React.Component\r\n    //setState асинхронен\r\n    deactivateEditMode = () => {\r\n        this.setState(\r\n            { editMode: false }\r\n        );\r\n        this.props.updateUserStatus(this.state.status);\r\n        //взял status из локального state\r\n    };\r\n    //урок 71 фокус\r\n    onStatusChange = (e) => {\r\n        this.setState(\r\n            { status: e.currentTarget.value });\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState(\r\n                { status: this.props.status }\r\n            );\r\n        };\r\n    }\r\n    render() {\r\n        return (\r\n            <div>{!this.state.editMode &&\r\n                //если editMode в стейте=false ,то...\r\n                <div>\r\n                    <span onDoubleClick={this.activateEditMode}>{this.props.status || \"no status\"}</span>\r\n                </div>\r\n            }\r\n                {this.state.editMode &&\r\n                    <div>\r\n                        <input onChange={this.onStatusChange}/*хз так как value зафиксирован*/\r\n                            autoFocus={true}\r\n                            onBlur={this.deactivateEditMode} value={this.state.status} />\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n};\r\nexport default ProfileStatus;\r\n","import classes from \"./Profileinfo.module.css\"\r\nimport React, { useState, useEffect } from \"react\";\r\n// import { useEffect } from \"react\";\r\n\r\nconst ProfileStatusWithHooks= (props) =>{\r\n   let [editMode,setEditMode]= useState(false)\r\n//    деструктуризация массива\r\n//    useState сидит в библиотеке react\r\n//useState возвращает первым номером значение и 2м ф. \r\n// которая меняет это значение(1-editMode,2-setEditMode)\r\nlet [status,setStatus]= useState(props.status)\r\n// раздробил локальный стейт на 2 части\r\nuseEffect( ()=>{\r\n    setStatus=(props.status);\r\n},[props.status])\r\n// зависишь от [props.status] если он поменялся то отрисуй\r\n// useEffect срабатывает после отрисовки компоненты\r\nconst activateEditMode = () => {\r\n  setEditMode(true)\r\n}\r\nconst deactivateEditMode = () => {\r\n    setEditMode(false)\r\n    props.updateUserStatus(status);\r\n}\r\nconst onStatusChange = (e) => {\r\n    setStatus(e.currentTarget.value);\r\n    // закидываю вводимые символы в props.status\r\n}\r\n            return (\r\n            <div>{!editMode&&//если editMode в стейте=false ,то...\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status ||\"no status\"}</span>\r\n                </div>\r\n            }\r\n                {editMode &&\r\n                    <div>\r\n                        <input onChange={onStatusChange} \r\n                        // при изменениии в input\r\n                        value={status}\r\n                         autoFocus={true}\r\n                          onBlur={deactivateEditMode} />\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    \r\n};\r\nexport default ProfileStatusWithHooks;\r\n","\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport classes from \"./Profileinfo.module.css\"\r\nimport ProfileStatus from \"./ProfileStatus\"\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nconst Profileinfo = (props) => {\r\n  if (!props.profile){\r\n    return <Preloader />\r\n  }\r\n // debugger\r\n  return (\r\n    <div>\r\n      <img src=\"https://i.pinimg.com/originals/f5/39/b6/f539b6967cb0f250d4e05cc133a8c87d.jpg\" width=\"800\" height=\"400\"/>\r\n      <div className={classes.descr}></div>\r\n      <img src={props.profile.photos.large} />\r\n      <ProfileStatusWithHooks status={props.status}\r\n      updateUserStatus={props.updateUserStatus}/>\r\n      <div>avat+descr</div>\r\n      <div>Имя:{props.profile.fullName}</div>\r\n      <div>обо мне: {props.profile.aboutMe}</div>\r\n      <div>ищешь работу?{props.profile.lookingForAJob== true ? 'Да': 'Нет'}</div>\r\n      <div>\r\n        какую хочешь работу? {props.profile.lookingForAJobDescription}\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Profileinfo;\r\n","import classes from \"./Post.module.css\";\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={classes.item}>\r\n      <img src=\"http://pngimg.com/uploads/spongebob/spongebob_PNG8.png\" />\r\n      {/* <img src=\"https://kurer-sreda.ru/wp-contenpt/uloads/2020/06/1-48-800x663.png\" /> */}\r\n\r\n      {props.message}\r\n      <div>\r\n        <span>Like {props.count}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import classes from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { maxLengthCreator, required } from \"../../../utils/validator/validators\";\r\nimport { input } from \"../../common/FormControls/FormControls\";\r\n// console.log(MyPosts);\r\nconst maxLength10=maxLengthCreator(10);\r\nconst MyPosts =React.memo(props => {\r\n  // React.memo если пропсы не поменялись.то не рендерь\r\n  console.log('RENDER');\r\n  console.log(props);\r\n  let postElement = props.post.map((p) => (\r\n    <Post message={p.message} count={p.count} />\r\n  ));\r\n  let newPostElement = React.createRef(); /* 31 реакт создай ссылку*/\r\n  let addhhPost = (values) => {\r\n    // let newtext = newPostElement.current.value; -перенес в state\r\n    props.addPost(values.newPostText);\r\n    //props.dispatch(addhhPostActionCreator());\r\n    /*31,32 вызываю функцию addPost\r\n      в state.js */\r\n    /* props.updatenewPost('');обнуляю значение в textarea \r\n    -перенес в state.js */\r\n  };\r\n  let onPostChange = () => {\r\n    let newtext5 = newPostElement.current.value;\r\n    props.updateNewPostText(newtext5);\r\n    //let action=(onPostChangeActionCreator(newtext5))\r\n    //создал action для примера чтобы видеть процесс\r\n    //props.dispatch(action);\r\n    //при изменении в textarea передаю данные в state.js\r\n  };\r\n  return (\r\n    <div className={classes.post}>\r\n      <h2>My Post</h2>\r\n      <div>\r\n        <PostReduxForm onSubmit={addhhPost}/>\r\n      </div>\r\n      <div className={classes.newpost}>{postElement}</div>\r\n    </div>\r\n  );\r\n});\r\nconst myPostForm= (props) => {\r\n  return(\r\n  <form onSubmit={props.handleSubmit}>\r\n    <div>\r\n      <Field component={input} name=\"newPostText\" placeholder=\"введите\" \r\n      validate={[required,maxLength10]} />\r\n    </div>\r\n    <div>\r\n      <button >Add post</button>\r\n    </div>\r\n  </form>\r\n  )\r\n};\r\nconst PostReduxForm = reduxForm({ form: \"myPostText\" })(myPostForm);\r\nexport default MyPosts;\r\n","// console.log(MyPosts);\r\nimport {\r\n  addhhPostActionCreator} from \"../../../Redux/profileReduser\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport { connect } from \"react-redux\";\r\n\r\n/*const MyPostsContainer = () => {\r\n  \r\n  return (\r\n    <StoreContext.Consumer>\r\n       {\r\n      (store)=> {\r\n        let state = store.getState();\r\n        let addhhPost = () => {\r\n          // let newtext = newPostElement.current.value; -перенес в state\r\n          store.dispatch(addhhPostActionCreator());\r\n          /*31,32 вызываю функцию? addPost\r\n          в state.js */\r\n/* props.updatenewPost('');обнуляю значение в textarea \r\n          -перенес в state.js\r\n           \r\n        };\r\n        let onPostChange = (newtext5) => {\r\n          let action = onPostChangeActionCreator(newtext5);\r\n          //создал action для примера чтобы видеть процесс\r\n          store.dispatch(action);\r\n          //при изменении в textarea передаю данные в state.js\r\n                };\r\n      return <MyPosts\r\n        addPost={addhhPost}\r\n        updateNewPostText={onPostChange}\r\n        post={state.profilePage.post}\r\n        newPostText={state.profilePage.newPostText}\r\n      />\r\n   }\r\n    }\r\n    </StoreContext.Consumer>\r\n  );\r\n};*/\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    post: state.profilePage.post,\r\n    newPostText: state.profilePage.newPostText,\r\n  };\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addPost: (newPostText) => {\r\n      dispatch(addhhPostActionCreator(newPostText));\r\n    },\r\n  };\r\n};\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\nexport default MyPostsContainer;\r\n","// import classes from \"./Profile.module.css\";\r\nimport Profileinfo from \"./Profileinfo/Profileinfo\";\r\n//import store, { addPost } from '../../Redux/State';\r\n\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n  return (\r\n    <div>\r\n      <Profileinfo profile={props.profile} status={props.status}\r\n      updateUserStatus={props.updateUserStatus}/>\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport { profilesData, getStatus, updateUserStatus } from \"../../Redux/profileReduser\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n  componentDidMount() {\r\n\r\n    let userIdd = this.props.match.params.userId\r\n    /*когда вызывается withRouter из url метод match возвращает params-userId\r\n    и получаю id юзера*/\r\n    if (!userIdd) {\r\n      userIdd = this.props.authorizedUserId;\r\n    }\r\n   /*  if (!userIdd) {\r\n      this.props.history.push(\"/login\");\r\n      когда жму кнопку вылогиниться нужно уйти из профиля,\r\n      но вроде и так срабатывает withAuthRedirect,\r\n       а это \"програмный\" редирект\r\n    } */\r\n    this.props.profilesData(userIdd);\r\n    this.props.getStatus(userIdd);\r\n    //вызываю thunk из редюсера\r\n  } //end componentDidMount\r\n  render() {\r\n    return <Profile {...this.props} status={this.props.status}\r\n      updateUserStatus={this.props.updateUserStatus}\r\n      profile={this.props.profile}/*profile={this.props.profile} -был заккоментирован*/ />;\r\n  }\r\n} //end ProfileContainer\r\nlet mapStateToProps = (state) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserId: state.auth.id,\r\n  isAuth: state.auth.isAuth,\r\n});\r\nexport default compose(\r\n  connect(mapStateToProps, { profilesData, getStatus, updateUserStatus }),\r\n  withAuthRedirect,\r\n  //withRouter получаю из url нужную часть\r\n  withRouter\r\n)(ProfileContainer);\r\n//возьми ProfileContainer и закинь его в withRouter--> withAuthRedirect,а \r\n// потом результат в connect(mapStateToProps...\r\n"],"sourceRoot":""}